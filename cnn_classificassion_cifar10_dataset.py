# -*- coding: utf-8 -*-
"""CNN Classificassion CIFAR10 dataset.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17Byk9lNop4Zi4Uup72OHagS1AwDrV6Z3
"""

from keras.datasets import cifar10
from keras.utils import np_utils
from keras.models import Sequential
from keras.layers.core import Dense, Dropout, Activation, Flatten
from keras.layers.convolutional import Conv2D, MaxPooling2D
from keras.optimizers import SGD, Adam, RMSprop
import matplotlib.pyplot as plt

#Cifar has 60K images 32x32 on 3 channels
IMG_CHANNELS = 3
IMG_ROWS = 32
IMG_COLS = 32

BATCH_SIZE = 128
NB_EPOCH = 20
NB_CLASSES = 10
VERBOSE = 1
VALIDATION_SPLIT = 0.2 # Train on 80% validate 20%
OPTIM = RMSprop()

#Load Dataset
(X_train, y_train), (X_test, y_test) = cifar10.load_data()
print("X_train Shape:", X_train.shape)
print(X_train.shape[0],'train samples')
print(X_test.shape[0], 'test samples')

#Convert to categorical
Y_train = np_utils.to_categorical(y_train,NB_CLASSES) # Converts the 10 classes into a vector
Y_test = np_utils.to_categorical(y_test, NB_CLASSES)

#Normalise data
X_train = X_train.astype('float32')#Convert pixel value to float value
X_test = X_test.astype('float32')
X_train /=255
X_test /=255

#Create model-CNN layer

model = Sequential()
model.add(Conv2D(32, (3,3), padding='same', 
                 input_shape=(IMG_ROWS, IMG_COLS, IMG_CHANNELS)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2,2)))
model.add(Dropout(0.25))

#Create Deep Layer

model.add(Flatten())
model.add(Dense(512))
model.add(Activation('relu'))
model.add(Dropout(0.5))
model.add(Dense(NB_CLASSES))
model.add(Activation('softmax'))
model.summary()

#Train Model
model.compile(loss ='categorical_crossentropy', optimizer=OPTIM,
              metrics=['accuracy'])
model.fit(X_train, Y_train, batch_size= BATCH_SIZE,
          epochs = NB_EPOCH, validation_split=VALIDATION_SPLIT,
          verbose= VERBOSE)
score = model.evaluate(X_test, Y_test,
                       batch_size= BATCH_SIZE, verbose = VERBOSE)
print("Test score:", score[0])
print("Test Accuracy:", score[1])

model.summary()

import pandas as pd
from google.colab import files
file = files.upload()

#pip install scipy==1.1.0

import scipy.misc

imgs = scipy.misc.imread('cat.jpg')

imgs = scipy.misc.imresize(imgs, (32,32))

model.predict_classes(imgs.reshape(1,32,32,3))

model.predict_proba(imgs.reshape(1,32,32,3))